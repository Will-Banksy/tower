(*
	EBNF Grammar Syntax:
		Terminals are strings, i.e. "pub" or 'he says "hello"' if quotes need to be included:
			Strings can use backslashes as escape characters and supports common escape sequences
		Nonterminals are identifiers
		Basic syntax: `nonterminal = definition ;`

		A token is a terminal or nonterminal
		In the definition of a nonterminal:
			Tokens come directly after one another with space between, denoting concatenation, e.g. `main_fun = "public" space "static" space "void" space "main"` matches "public static void main"
			Tokens can be grouped with ()
			Tokens can have the following postfix operators applied:
				"x+" - one or more x
				"x*" - zero or more x
				"x?" - zero or one x
			Tokens can have the following infix operators applied:
				"x | y" - x or y
				"x - y" - x that does not match y, i.e. matches when x does but y doesn't
			The following constants apply:
				XID_START - Matches any unicode character in the XID_Start class
				XID_CONTINUE - Matches any unicode character in the XID_Continue class
				WHITESPACE - Matches any unicode character that has the White_Space property
				ALPHA - Matches any unicode alphabetic character
				ALPHANUM - Matches any unicode alphabetic character and "1234567890"
				CHAR - Matches any unicode character
				NUM - Matches any of "1234567890"
				NUM_BIN - Matches any of "01"
				NUM_HEX - Matches any of "1234567890abcdef"
				NUM_OCT - Matches any of "1234567"
			"<? "explanation" ?>" can be used to denote syntax that is highly complex and isn't formalised in the EBNF grammar
*)

module = ( s* ( function | structure | constant ) )* ;

function = "fn" s+ identifier s* stack_effect? s* block ;

structure = "struct" s+ identifier s* '{' ( s* identifier s* ':' ( identifier ) )* s* '}' ;

(* // TODO: Implement constant parsing and integrate into analysis. Also need to turn string literals into constants for compilation *)
constant = "const" s+ identifier s* ':' s* identifier '=' literal ;

stack_effect = '(' s* identifier_list s* "->" s* identifier_list s* ')' ;

identifier_list = ( identifier (s* ',' s* identifier )* )? ;

(* // NOTE: Add necessary spaceing between items in a block? E.g. currently "this"isvalid as a string literal and identifier *)
block = "{" ( s* ( identifier | literal | constructor | field_access ) )* s* "}" ;

(* // TODO: Integrate this into grammar *)
instruct_identifier = "__" identifier ;

(* Same definition of identifiers that Rust uses - derived from unicode rules for identifiers *)
identifier = ( XID_START | "_" ) XID_CONTINUE* ;

literal = literal_string | literal_integer | literal_float | literal_fnref ;

literal_string = '"' ( ( '\' ( '\' | 'n' | 't' | 'r' | '0' | '"' | ( 'x' NUM_HEX NUM_HEX ) ) ) | CHAR - '"' )* '"' ;

literal_integer = "-"? ( "0b" NUM_BIN+ ) | ( "0x" NUM_HEX+ ) | ( "0o" NUM_OCT+ ) | ( NUM+ ) ( ( "u" | "i" ) ("128" | "64" | "32" | "16" | "8" )? )? ;

literal_float = "-"? NUM+ ( "." NUM* )? ( ( "e" | "E" ) "-"? NUM+ ) ;

literal_fnref = '&' identifier ;

constructor = constructor_struct ;

constructor_struct = "->" s+ identifier ;

field_access = "." identifier ;

(*
literal_enum = identifier '::' ( identifier | literal_struct ) ;
*)

(* // TODO: Decide whether to go for all unicode whitespace characters or just the usual ones *)
s = WHITESPACE ;